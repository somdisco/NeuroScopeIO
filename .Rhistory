install.packages('devtools','roxygen2')
install.packages('devtools')
install.packages('roxygen2')
library(devtools)
has_devel()
has_devel()
devtools::load_all()
devtools::load_all()
devtools::load_all(".")
devtools::load_all(".")
?khoros::read.khoros.header
??read.khoros.header
devtools::load_all(".")
?khoros::read.khoros.header
library("khoros", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:khoros", unload=TRUE)
devtools::load_all(".")
khoros::read.khoros.header('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.viff')
devtools::load_all(".")
khoros::read.khoros.header('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.viff')
khoros::read.khoros.header()
?khoros::read.khoros.header()
devtools::load_all(".")
devtools::load_all(".")
?khoros::read.khoros.header()
?khoros::read.khoros.header
devtools::load_all(".")
devtools::document()
?khoros::read.khoros.header()
?khoros::read.khoros.header()
devtools::document()
?khoros::read.khoros.header()
devtools::document()
?khoros::read.khoros.header()
devtools::document()
?khoros::read.khoros.cube()
devtools::document()
?khoros::read.khoros.includefile
?khoros::read.khoros.includefile()
a = read.khoros.includefile('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-all.incl', img_width = 128, img_height = 128)
a$mask
any(a$mask)
a$class
devtools::document()
?khoros::read.khoros.ctab()
devtools::document()
?khoros::read.khoros.nunr()
devtools::document()
?khoros::convert.bsl.to.cbl()
devtools::document()
devtools::document()
library(khoros)
?khoros::convert.cbl.to.bsl()
?khoros::convert.cbl.to.bsl
a = read.khoros.cube('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.xv')
a = read.khoros.cube('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.viff')
devtools::document()
library(khoros)
a = read.khoros.cube('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.viff')
a = read_khoros_cube('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-cor.viff')
a = read_khoros_includefile('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-all.incl', img_width = 128, img_height = 128)
ctab = read_khoros_ctab('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/6d-synthetic_30.ctab')
disp_discrete_image(a$class, ctab, 2)
imager::plot()
library(khoros)
a = read_khoros_includefile('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-all.incl', img_width = 128, img_height = 128)
ctab = read_khoros_ctab('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/6d-synthetic_30.ctab')
disp_discrete_image(a$class, ctab, 2)
disp_discrete_image(a$class, ctab, 1)
disp_discrete_image(a$class, ctab, 10)
library(khoros)
khoros::read_khoros_includefile('~/Google Drive/Datasets/6d-syn-cor/8class-caseI/8class-caseI-all.incl', img_width = 128, img_height = 128)
getwd()
setwd("~/Google Drive/Research/SOM_KDE")
library(khoros)
library(khoros)
library(khoros)
?khoros::write_khoros_datacube
library(khoros)
library(khoros)
library(khoros)
library(khoros)
roxygen2::namespace_roclet()
?roxygen2::namespace_roclet()
?roxygen2::namespace_roclet
roxygen2::roxygenise()
library(khoros)
library(Rcpp)
library(RcppArmadillo)
library(RcppParallel)
library(RcppProgress)
library(somkde)
### Container to store everything
sainmix = NULL
### Set the true parameters of this mixture distribution
sainmix$w = c(3/7, 3/7, 1/7)
sainmix$mu = matrix(NA, nrow = 3, ncol = 2)
sainmix$mu[1,] = c(-1,0)
sainmix$mu[2,] = c(1, 2*sqrt(3)/3)
sainmix$mu[3,] = c(1, -2*sqrt(3)/3)
sainmix$sigma = array(NA, dim = c(2,2,3))
sainmix$sigma[,,1] = matrix(c((3/5)^2, (3/5)^2*(7/10), (3/5)^2*(7/10), (7/10)^2), 2, byrow=T)
sainmix$sigma[,,2] = matrix(c((3/5)^2, 0, 0, (7/10)^2), 2, byrow=T)
sainmix$sigma[,,3] = matrix(c((3/5)^2, 0, 0, (7/10)^2), 2, byrow=T)
### Sample (pull more samples than necessary)
samp = somkde::rnorm_mv_mix(100000, sainmix$w, sainmix$mu, sainmix$sigma)
### For 100 observations, select 43,43,14
s100_idx = c(which(samp$group==1)[1:43], which(samp$group==2)[1:43], which(samp$group==3)[1:14])
s100 = samp$samples[s100_idx,]
s100_group = samp$group[s100_idx]
khoros::write_khoros_files(X = s100, pxlclass = s100_group, incl = rep(T, 100),
img_width = 10, img_height = 100/10,
scale_from_min = c(-4,-4), scale_from_max = c(4,4),
filenameroot = 'sain3mix_n100',
directory = '~/Google Drive/Datasets/sain3mix', arrange_by_class = F)
apply(samp$samples,2,range)
devtools::build_win()
library(khoros)
library(khoros)
?khoros::read_nna
khoros::read_nna(path_to_nna = "~/Google Drive/Datasets/6dCSKN-synthetic/6dCSKN-synthetic.nna")
khoros::read_nna(path_to_nna = "~/Google Drive/Datasets/6dCSKN-synthetic/6dCSKN-synthetic.nna", img_z = 6)
library(khoros)
library(khoros)
library(khoros)
library(khoros)
library(khoros)
install.packages("imager")
library(khoros)
library(NeuroScopeIO)
library(NeuroScopeIO)
NeuroScopeIO::read_ctab("~/Google Drive/Datasets/SGRW/ds/SGRW_tableau20.ctab")
NeuroScopeIO::read_incl("~/Google Drive/Datasets/SGRW/ds/SGRW_20class.incl", img_x = 128, img_y = 128)
str(NeuroScopeIO::read_incl("~/Google Drive/Datasets/SGRW/ds/SGRW_20class.incl", img_x = 128, img_y = 128))
any(NeuroScopeIO::read_incl("~/Google Drive/Datasets/SGRW/ds/SGRW_20class.incl", img_x = 128, img_y = 128)$maked)
NeuroScopeIO::read_khoros_header("~/Google Drive/Datasets/SGRW/ds/SGRW-100d_11class_cov10-20.viff")
tmp = NeuroScopeIO::read_khoros_viff("~/Google Drive/Datasets/SGRW/ds/SGRW-100d_8class_var500-4000.viff")
str(tmp)
NeuroScopeIO::read_nna("~/Google Drive/Datasets/SGRW/ds/SGRW-100d_8class_var500-4000.nna", img_z = 100)
tmp = NeuroScopeIO::read_nunr("~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", som_x = 20, som_y = 20, img_x = 128, img_y = 128)
library(NeuroScopeIO)
tmp = NeuroScopeIO::read_nunr("~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", som_x = 20, som_y = 20, img_x = 128, img_y = 128)
tmp$mapping
range(tmp$mapping)
tmp$density
sum(tmp$density)
tmp$class
tmp$som_indexmap
ctab = NeuroScopeIO::read_ctab("~/Google Drive/Datasets/SGRW/ds/SGRW.ctab")
vis_ctab(ctab)
library(NeuroScopeIO)
vis_ctab(ctab)
?text
library(NeuroScopeIO)
vis_ctab(ctab)
400*400*4
library(NeuroScopeIO)
incl = read_incl("~/Google Drive/Datasets/SGRW/ds/SGRW_20class.incl", img_x = 20, img_y = 20)
incl = read_incl("~/Google Drive/Datasets/SGRW/ds/SGRW_20class.incl", img_x = 128, img_y = 128)
vis_classmap(class_matrix = incl$class, ctab = ctab)
as.matrix(1:4)
as.array(matrix(rnorm(9),3,3))
as.array(matrix(rnorm(9),3,3))
dim(matrix(rnorm(9),3,3))
library(NeuroScopeIO)
convert_linidx_to_pxlidx(1:20, img_x = 5, img_y = 4)
pxlidx = convert_linidx_to_pxlidx(1:20, img_x = 5, img_y = 4)
convert_pxlidx_to_linidx(row=pxlidx[,"row"], col = pxlidx[,"col"], img_x = 5, img_y = 4)
convert_pxlidx_to_linidx(row=pxlidx[20:1,"row"], col = pxlidx[20:1,"col"], img_x = 5, img_y = 4)
library(NeuroScopeIO)
X1 = read_khoros_viff("~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff")
X2 = X1
X1 = khoros::convert_cbl_to_bsl(X1)
X2 = convert_datcub_to_datmat(X2)
all.equal(X1,X2)
str(X1)
str(X2)
?median
library(NeuroScopeIO)
X1 = read_khoros_viff("~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff")
str(X1)
ds = datcub_band_stats(X1, stat = "mean")
str(ds)
ds[1,1]
str(X1)
str(ds)
library(NeuroScopeIO)
ds = datcub_band_stats(X1, stat = "mean")
str(ds)
ds[1,1]
mean(X1[1,1,])
ds = datcub_band_stats(X1, stat = "min")
min(X1[1,1,])
ds[1,1]
ds[1,128]
min(X1[1,128,])
quantile(X1[1,128,], probs = 0.75)
ds = datcub_band_stats(X1, stat = "q75")
ds[1,128,]
ds[1,128]
colors()
grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
scales::show_col(grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)])
factor(matrix(sample.int(n=10,size=12),ncol=3))
factor(matrix(sample.int(n=12,size=10),ncol=3))
?rep
rep(1:3, length.out = 5)
col2rgb
col2rgb(c('white','black','red','white'))
library(NeuroScopeIO)
matrix(sample.int(n=12,size=10),ncol=3)
matrix(sample.int(n=12,size=12),ncol=3)
matrix(sample.int(n=3,size=12),ncol=3)
matrix(sample.int(n=3,size=12, replace=T),ncol=3)
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3))
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3), seed = 10)
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3), seed = 101)
vis_matrix_discrete(matrix(sample.int(n=3,size=12, replace=T),ncol=3), seed = 200)
tmp = matrix(sample.int(n=10,size=100*150, replace=T),ncol=150)
tmp
vis_matrix_discrete(tmp)
str(tmp)
vis_matrix_discrete(tmp)
tmp = matrix(sample.int(n=10,size=100*150, replace=T),ncol=150)
vis_matrix_discrete(tmp)
colorRamp(c('white','navy'))(runif(100))
colorRamp(c('white','navy'))(c(runif(100),NA))
tmp = matrix(c(1:6,NA,NA,NA), ncol = 3)
tmp
tmp[is.na(c(NA,NA,3)),] = c(0,0,0)
tmp
library(NeuroScopeIO)
vis_matrix_gradient(matrix(rnorm(100*150),ncol=150))
#' Values < lower quantile are reset to lower quantile, and values > high quantile are reset to the high quantile.
#' Optional, default is [0,1].
#' @param low_color Optional, specifies the color used for the low end of the color ramp.
#' Defaults to 'white'.
#' @param high_color Optional, specifies the color used for the high end of the color ramp.
#' Defaults to 'navy'
#'
#' @return nothing, visualization is produced
#'
#' @export
vis_matrix_gradient = function(mat, scale_fxn = "linear", qclip=c(0,1), low_color = 'white', high_color = 'black') {
if(!(scale_fxn %in% c('linear','ecdf'))) stop("scale_fxn must be either 'linear' or 'ecdf'")
if(length(qclip)!=2 || any(qclip < 0) || any(qclip > 1)) stop("qclip must be a vector (length=2) in [0,1].")
nr = nrow(mat)
nc = ncol(mat)
mat = c(mat)
val_rng = quantile(mat, probs = qclip, na.rm = T)
val_low = val_rng[1]
val_high = val_rng[2]
mat[mat <= val_low] = val_low
mat[mat >= val_high] = val_high
if(scale_fxn == "ecdf") {
mat = ecdf(mat)(mat)
} else if(scale_fxn == "linear") {
mat = (mat - min(mat, na.rm = T)) / diff(range(mat,na.rm=T)) * (1 - 0) + 0
}
color = colorRamp(c(low_color,high_color))(mat)
if(any(is.na(mat))) {
color[which(is.na(mat)),] = c(0,0,0)
}
RGBarray = array(color, dim = c(nr,nc,3))
RGBarray = RGBarray / 255
RGBarray = base::aperm(RGBarray, perm = c(2,1,3))
RGBarray = imager::as.cimg(RGBarray)
par(mar=c(0,0,0,0))
plot(RGBarray, xlab=NULL, ylab=NULL, axes=FALSE, rescale=F, col.na = rgb(0,0,0))
}
vis_matrix_gradient(matrix(rnorm(100*150),ncol=150), high_color = 'black')
library(NeuroScopeIO)
read_nna("~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", img_z = 100)
read_nna("~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.copy.nna", img_z = 100)
read_nna("~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.copy.nna", img_z = 100)
?get
?assign
file.exists("~/Desktop/hey.txt")
?cout
?sprintf
??cout
?cat()
library(NeuroScopeIO)
tmp = load_SOM_products(data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff", include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab", cadj_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.cadj")
library(NeuroScopeIO)
tmp = load_SOM_products(data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff", include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab", cadj_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.cadj")
library(NeuroScopeIO)
tmp = load_SOM_products(data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff", include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab", cadj_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.cadj")
tmp = load_SOM_products(data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff", include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab")
tmp = load_SOM_products(include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab")
str(tmp)
tmp = load_SOM_products(data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff", include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl", nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna", wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub", nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr", ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab", cadj_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.cadj")
str(tmp)
library(NeuroScopeIO)
?NeuroScopeIO::convert_datcub_to_datmat
?par
?rgb
?rect
?colorRamp
install.packages("devtools")
?devtools::check
library(NeuroScopeIO)
?NeuroScopeIO::read_khoros_viff
str(tmp)
knitr::opts_chunk$set(echo = TRUE)
nunr = NeuroScopeIO::read_nunr(filename = nunr_file, som_x = som_x, som_y = som_y, img_x = img_x, img_y = img_y)
data_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d_11class_cov100-500.viff"
include_file = "~/Google Drive/Datasets/SGRW/ds/SGRW_11class.incl"
nna_file = "~/Google Drive/Datasets/SGRW/ds/100d/SGRW-100d.nna"
wgtcub_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.wgtcub"
nunr_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.nunr"
ctab_file = "~/Google Drive/Datasets/SGRW/ds/SGRW.ctab"
cadj_file = "~/Google Drive/Datasets/SGRW/dp/100d/recall/SGRW-100d_11class_cov100-500_20x20.k3.r.5M.cadj"
nunr = NeuroScopeIO::read_nunr(filename = nunr_file, som_x = som_x, som_y = som_y, img_x = img_x, img_y = img_y)
X = NeuroScopeIO::read_khoros_viff(filename = data_file, verbose = T)
str(X)
img_x = ncol(X)
img_x
img_y = nrow(X)
img_y
img_z = dim(X)[3]
img_z
X = NeuroScopeIO::convert_datcub_to_datmat(datcub = X)
str(X)
Xcube = NeuroScopeIO::convert_datmat_to_datcub(datmat = X, img_x = img_x, img_y = img_y)
str(Xcube)
incl = NeuroScopeIO::read_incl(filename = include_file, img_x = img_x, img_y = img_y)
str(incl)
vec_mask = NeuroScopeIO::convert_datcub_to_datmat(datcub = incl$masked)
str(vec_mask)
vec_class = NeuroScopeIO::convert_datcub_to_datmat(datcub = incl$class)
str(vec_class)
nna = NeuroScopeIO::read_nna(filename = nna_file, img_z = img_z)
str(nna)
W = NeuroScopeIO::read_khoros_viff(filename = wgtcub_file, verbose = F)
str(W)
som_x = ncol(W)
som_x
som_y = nrow(W)
som_y
nunr = NeuroScopeIO::read_nunr(filename = nunr_file, som_x = som_x, som_y = som_y, img_x = img_x, img_y = img_y)
str(nunr)
ctab = NeuroScopeIO::read_ctab(filename = ctab_file)
str(ctab)
CADJ = NeuroScopeIO::read_khoros_viff(filename = cadj_file, verbose = F)
str(CADJ)
CADJ = CADJ[,,1]
CADJ = CADJ[,,1]
CADJ = NeuroScopeIO::read_khoros_viff(filename = cadj_file, verbose = F)
str(CADJ)
CADJ = CADJ[,,1]
CADJ = CADJ[,,1]
CADJ = NeuroScopeIO::read_khoros_viff(filename = cadj_file, verbose = F)
str(CADJ)
CADJ = CADJ[,,1]
CONN = CADJ + t(CADJ)
som_labels = NeuroScopeIO::convert_datmat_to_datcub(datmat=nunr$class, img_x = som_x, img_y = som_y)
NeuroScopeIO::vis_classmap(class_matrix = som_labels, ctab = ctab, pixel_expansion_factor = 5)
unique(c(som_labels))
library(NeuroScopeIO)
knitr::opts_chunk$set(echo = TRUE)
NeuroScopeIO::vis_classmap(class_matrix = incl$class, ctab = ctab)
som_labels = NeuroScopeIO::convert_datmat_to_datcub(datmat=nunr$class, img_x = som_x, img_y = som_y)
NeuroScopeIO::vis_classmap(class_matrix = som_labels, ctab = ctab, pixel_expansion_factor = 5)
library(NeuroScopeIO)
knitr::opts_chunk$set(echo = TRUE)
som_labels = NeuroScopeIO::convert_datmat_to_datcub(datmat=nunr$class, img_x = som_x, img_y = som_y)
NeuroScopeIO::vis_classmap(class_matrix = som_labels, ctab = ctab, pixel_expansion_factor = 5)
275*0.8
275*0.8*2/25.4 + 17
315 + 116*4 + 181
